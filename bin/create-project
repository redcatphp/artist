#!/usr/bin/env php
<?php
if(!isset($argv[1])) return;
if(ob_get_length()) ob_get_clean();
$url = $argv[1];
$version = isset($argv[2])?$argv[2]:'master';

$downlad = function($url,$filename){
	$fp = fopen($url,'r');
	if(!$fp){
		echo "error: $url unreachable";
		exit;
	}
	echo "Downloading from $url...\n";
	file_put_contents($filename,$fp);
	echo "Downloaded in $filename\n";
};

$tmpCwd = sys_get_temp_dir().'/artist-create-project/'.uniqid(sha1($url)).'/';
$cwd = getcwd().'/';
if(!is_dir($tmpCwd)) @mkdir($tmpCwd,0755,true);

$downlad('https://raw.githubusercontent.com/redcatphp/artist/master/artist.phar',$tmpCwd.'artist.phar');
$downlad('https://raw.githubusercontent.com/redcatphp/artist/master/artist.phar.pubkey',$tmpCwd.'artist.phar.pubkey');

if(strpos($url,'://')===false){
	if(false!==$p=strpos($url,'@')){
		$auth = substr($url,0,$p+1);
		$url = substr($url,$p+1);
	}
	else{
		$auth = '';
	}
	$url = "https://{$auth}github.com/{$url}/archive/{$version}.zip";
}
$downlad($url,$tmpCwd.'archive.zip');
switch(pathinfo($url,PATHINFO_EXTENSION)){
	case 'zip':
		echo "Extracting ZIP\n";
		$zip = new ZipArchive;
		$zip->open($tmpCwd.'archive.zip');
		$zip->extractTo($tmpCwd);
		$zip->close();
		$zipDir = glob($tmpCwd.'*',GLOB_ONLYDIR);
		$zipDir = $zipDir[0];
		
		echo "Copying to CWD\n";
		$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($zipDir, RecursiveDirectoryIterator::SKIP_DOTS),RecursiveIteratorIterator::SELF_FIRST);
		foreach($iterator as $item){
			$sub = $iterator->getSubPathName();
			if($item->isDir()){
				$d = $cwd.$iterator->getSubPathName();
				if(!is_dir($d)) mkdir($d);
			}
			else{
				copy($item, $cwd.$sub);
			}
		}
	break;
	default:
		throw new \Exception('Type of url not implemented');
	break;
}

echo "Installing\n";

//$php = $tmpCwd.'artist.phar';
//array_shift($argv);
//array_shift($argv);
//array_shift($argv);
//array_unshift($argv,'composer:install');
//array_unshift($argv,$php);
//$_SERVER['argv'] = $GLOBALS['argv'] = array_values($argv);
//ob_start();
//include $php;

array_shift($argv);
array_shift($argv);
array_shift($argv);
$cmd = 'php '.$tmpCwd.'artist.phar composer:install '.implode(' ',$argv).' 2>&1';
echo $cmd;
$desc = [
	0 => ['file', 'php://stdin', 'r'],
	1 => ['file', 'php://stdout', 'w'],
	2 => ['file', 'php://stderr', 'w'],
];
$proc = proc_open( $cmd, $desc, $pipes );
if(is_resource($proc)){
	do {
		sleep(1);
		$status = proc_get_status($proc);
	} while ($status['running']);
	proc_close($proc);
}

echo "Cleaning\n";
$filesToClean = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($tmpCwd, RecursiveDirectoryIterator::SKIP_DOTS),RecursiveIteratorIterator::CHILD_FIRST);
foreach($filesToClean as $fileinfo) {
    $todo = ($fileinfo->isDir() ? 'rmdir' : 'unlink');
    $todo($fileinfo->getRealPath());
}