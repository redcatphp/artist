<?php
namespace RedCat\Artist\Plugin;
use RedCat\Artist\ArtistPlugin;
use Seld\JsonLint\ParsingException;
use RecursiveIteratorIterator;
use RecursiveDirectoryIterator;

class RedcatJsalias extends ArtistPlugin{
	protected $bowerAssetDirs = [
		'bower_components',
		'composer'=>'vendor/bower-asset',
	];
	protected $npmAssetDirs = [
		'node_modules',
		'composer'=>'vendor/npm-asset',
	];
	
	protected $description = 'Register navigator main javascript from bower vendor directory in requirejs paths config';
	protected $args = ['jsconfigfile'=>'The requirejs config paths file definition to store paths key'];
	
	protected $exclude = ['require'];
	protected $bowerAliasPrefix = '';
	protected $npmAliasPrefix = 'npm.';
	protected function exec(){
		$this->loadAssetInstallerPaths();
		$mapFile = $this->input->getArgument('jsconfigfile')?:$this->cwd.'app/require-paths.js';
		$start = "/* this file is autogenerated from \"artist asset:jsalias\" command, don't modify it, any change will be lost */\n";
		$start .= 'require.config({ paths: ';
		$end = ' });';
		
		$alias = [];
		
		foreach($this->bowerAssetDirs as $dir){
			$alias = array_merge( $alias, $this->registerAsset($dir,$this->npmAliasPrefix) );
		}
		foreach($this->npmAssetDirs as $dir){
			$alias = array_merge( $alias, $this->registerAsset($dir,$this->npmAliasPrefix) );
		}
		
		$jsonEncode = json_encode($alias,JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT,true);
		if(!is_dir($d=dirname($mapFile))) @mkdir($d,0777,true);
		file_put_contents($mapFile,$start.$jsonEncode.$end);
		$this->output->writeln('bower-asset and npm-asset packages alias registered for requirejs in '.$mapFile);
	}
	function registerAsset($assetDir,$aliasPrefix=''){
		$source = $this->cwd.$assetDir;
		$alias = [];
		foreach(glob($source.'/*',GLOB_ONLYDIR) as $p){
			$packageName = basename($p);
			$packageNameAlias = $aliasPrefix.$packageName;
			if(in_array($packageName,$this->exclude)) continue;
			if(is_file($jsonFile=$p.'/bower.json')||is_file($jsonFile=$p.'/package.json')||is_file($jsonFile=$p.'/component.json')){
				$json = json_decode(file_get_contents($jsonFile),true);
				if(!isset($json['main'])) continue;
				$mainJson = $json['main'];
			}
			elseif(is_file($jsonFile=$p.'/composer.json')){
				$json = json_decode(file_get_contents($jsonFile),true);
				if(!isset($json['extra']['component']['scripts'])) continue;
				$mainJson = $json['extra']['component']['scripts'];
			}
			else{
				continue;
			}
			foreach((array)$mainJson as $main){
				if(strtolower(pathinfo($main,PATHINFO_EXTENSION))=='js'){
					$alias[$packageNameAlias] = self::cleanDotInUrl($assetDir.'/'.$packageName.'/'.substr($main,0,-3));
					break;
				}
			}
		}
		return $alias;
	}
	
	function loadAssetInstallerPaths(){
		$cwd = property_exists($this,'cwd')?$this->cwd:getcwd();
		if(is_file($cwd.'composer.json')){
			$json = json_decode(file_get_contents($cwd.'composer.json'),true);
			if(is_array($json)){
				if(isset($json['config']['vendor-dir'])){
					$this->bowerAssetDirs['composer'] = $json['config']['vendor-dir'].'/bower-asset';
					$this->npmAssetDirs['composer'] = $json['config']['vendor-dir'].'/npm-asset';
				}
				if(isset($json['extra']['asset-installer-paths']['bower-asset-library'])){
					$this->bowerAssetDirs['composer'] = $json['extra']['asset-installer-paths']['bower-asset-library'];
				}
				if(isset($json['extra']['asset-installer-paths']['npm-asset-library'])){
					$this->npmAssetDirs['composer'] = $json['extra']['asset-installer-paths']['npm-asset-library'];
				}
			}
		}
	}
}
